# Testing the Cast_defect_detection machine learning using Gradio


Description of the project 
Machine learning models are highly effective tools that may be applied to various tasks, including but not limited to image categorization and natural language processing. After completing the training of a model, it is essential to verify its performance in a real-world scenario. Evaluating the effectiveness of your machine learning model via user-friendly interfaces can be a daunting task. However, Gradio provides a solution by allowing you to effortlessly construct interactive applications for this purpose. In this project, I will guide you through the procedure of evaluating a machine learning model application using Gradio.

 
$getting_started
Before you begin, make sure you have the following:

Python installed on your system.
Your trained machine learning model (e.g., a TensorFlow, PyTorch, or scikit-learn model).
Gradio installed. You can install it using pip:

pip install gradio



Creating the Machine Learning Model
For this project i used a the OpenCV to read the dataset. You can replace this with your own model for testing. Here’s a quick code snippet to create and train an OpenCV model:

pip install imutils

pip install opencv-python

pip install opencv-python

pip install matplotlib

pip install pandas

import cv2
import os
from PIL import Image
from matplotlib import pyplot as plt
import numpy as np
import pandas as pd
from imutils import paths
from cleanvision.imagelab import Imagelab



#importing and viewing the dataset
root ="dataset"
frames = os.listdir(root)
len(frames)
fig , axs = plt.subplots(nrows=5,ncols=10,figsize=(5,5))
axs = axs.flatten()
for i in range(50):
    filepath = os.path.join(root,frames[i])
    Img = Image.open(filepath)
    axs [i].imshow(Img)
    axs [i].axis('off')
    axs [i].set_title(frames[i])
plt.show()

#Building the model
image = list(paths.list_images("dataset"))
image
for imagePath in image:
    images = cv2.imread(imagePath)
    cv2.imshow("Frame",images)
imagelab = Imagelab(data_path="dataset")
imagelab.find_issues()
imagelab.report()


Setting up the Gradio Interface
With this model ready, i created an interactive interface using Gradio. i build a simple web app that allows users to input image and get predictions:
Here is the code snipper for the gradio 

import numpy as np
import gradio as gr

def sepia(input_img):
    sepia_filter = np.array([
        [0.393, 0.769, 0.189], 
        [0.349, 0.686, 0.168], 
        [0.272, 0.534, 0.131]
    ])
    sepia_img = input_img.dot(sepia_filter.T)
    sepia_img /= sepia_img.max()
    return sepia_img

demo = gr.Interface(sepia, gr.Image(), "text")
demo.launch()


In this code:
- We define a function `classify_text` that takes an input text, preprocesses it (if needed), and makes predictions using the trained model.
- We create a Gradio interface (`iface`) by specifying the function, input type (“text”), and output type (“text”).
- The `live=True` parameter allows real-time updates as users type.


Testing the Model App
To test the machine learning model app, follow these steps:

1. Run the code above in your Python environment. This will start a local web server for your Gradio app.

2. Open your web browser and navigate to the provided URL (usually http://localhost:-----). You will see the interface for your model app.

3. Enter text into the input box and observe the predictions generated by your model.

4. Test different inputs to assess the model’s performance. Ensure it provides meaningful and accurate results.



Conclusion
Gradio streamlines the procedure of evaluating machine learning models by enabling the creation of interactive applications with less exertion. This approach can be employed to evaluate alternative models for diverse purposes. Ensure that you substitute the included scikit-learn model with your own trained model, and modify the input and output interfaces to suit your particular use case. Gradio simplifies the process of collecting input and assessing the real-world effectiveness of your model.
